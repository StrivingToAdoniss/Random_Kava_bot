import asyncio
import logging
import math
import re

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from aiogram.utils.exceptions import BotBlocked

from Files.classification import Classification
from Model.Question import questions
from Model.User import user
from Model.Category import categories
from Model.User_Answer import user_answer
from admins import admins_list, chat_id

logging.basicConfig(level=logging.INFO)

token = '6105836630:AAGLIAYZH5xO2UH8C5cmKqXv_7YalKh-5dU'
bot = Bot(token)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot)
order = {}
data = questions.get_data()

print(data)


@dp.message_handler(commands=['send_test'])
async def test(message: types.Message):
    if str(message.from_user.id) not in admins_list:
        await message.answer("No access.")
        return
    else:
        await bot.send_message("795526685", text=f"–ù–∞—à –ø—Ä–æ—î–∫—Ç –¥–æ–±—ñ–≥–∞—î –∫—ñ–Ω—Ü—è!\n"
                    f"–ë—É–¥–µ–º–æ —Ç–æ–±—ñ –¥—É–∂–µ –≤–¥—è—á–Ω—ñ, —è–∫—â–æ —Ç–∏ –∑–∞–ø–æ–≤–Ω–∏—à "
                    f"<a href='https://docs.google.com/forms/d/e/1FAIpQLSeC9d6H0SaL6idGnJfRTZ6zYG0C9CMCrdq3hcT8MqLtBZClYw/viewform?pli=1'>—Ñ–æ—Ä–º—É —Ñ—ñ–¥–±–µ–∫—É</a>üíï "
                    f"–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É —ñ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É!",
                    parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['send_form'])
async def test(message: types.Message):
    if str(message.from_user.id) not in admins_list:
        await message.answer("No access.")
        return
    else:
        for user_id in user.get_users_all_questions():
            try:
                print("sent")
                await bot.send_message(user_id, text=f"–ù–∞—à –ø—Ä–æ—î–∫—Ç –¥–æ–±—ñ–≥–∞—î –∫—ñ–Ω—Ü—è!\n"
                                                     f"–ë—É–¥–µ–º–æ —Ç–æ–±—ñ –¥—É–∂–µ –≤–¥—è—á–Ω—ñ, —è–∫—â–æ —Ç–∏ –∑–∞–ø–æ–≤–Ω–∏—à "
                                                     f"<a href='https://docs.google.com/forms/d/e/1FAIpQLSeC9d6H0SaL6idGnJfRTZ6zYG0C9CMCrdq3hcT8MqLtBZClYw/viewform?pli=1'>—Ñ–æ—Ä–º—É —Ñ—ñ–¥–±–µ–∫—É</a>üíï "
                                                     f"–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É —ñ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É!",
                                       parse_mode=ParseMode.HTML)
            except BotBlocked as e:
                print("Attention please! The user {} has blocked the bot. I can't send anything to them".format(
                    message.chat.id))



@dp.message_handler(commands=['send_discount'])
async def test(message: types.Message):
    if str(message.from_user.id) not in admins_list:
        await message.answer("No access.")
        return
    else:
        for user_id in user.get_users_all_questions():
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            button_send_discount = types.KeyboardButton(text="–¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–Ω–∏–∂–∫—É.")
            keyboard.add(button_send_discount)

            await bot.send_message(user_id, f"–¢–∏ –≤–∂–µ –Ω–∞ —Ñ—ñ–Ω—ñ—à–Ω—ñ–π –ø—Ä—è–º—ñ–π! –î–æ–º–æ–≤–ª—è–π—Å—è –∑—ñ —Å–≤–æ—î—é –≥—Ä—É–ø–æ—é —â–æ–¥–æ –¥–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ –≤ ¬´–ö–æ—Ñ—ñ-—à–æ–ø¬ª.\n"
                                            f"–¢–∏ –∑–º–æ–∂–µ—à —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∑–Ω–∏–∂–∫–æ—é –æ–¥–∏–Ω —Ä–∞–∑ –∑ 15.05 –¥–æ 15.06. "
                                            f"–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∏–∂–∫—É ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–Ω–∏–∂–∫—É¬ª —ñ –ø–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ –±–∞—Ä–∏—Å—Ç—ñ.\n\n"
                                            f"–£–í–ê–ì–ê! –§–æ—Ç–æ –∑–Ω–∏–∂–∫–∏ –∑–Ω–∏–∫–∞—é—á–µ, —Ç–æ–º—É –∫–Ω–æ–ø–∫—É –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ —Ç—Ä–µ–±–∞ –≤–∂–µ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –∑–∞–∫–ª–∞–¥—ñ!",
                                   reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–Ω–∏–∂–∫—É.")
async def process_send_discount(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if str(user_id) in user.get_users_id_with_valid_screen():
        if not user.is_discount_set(user_id):
            keyboard2 = types.ReplyKeyboardRemove()
            photo_file = "–ó–Ω–∏–∂–∫–∞.png"
            photo_msg = await bot.send_photo(chat_id=user_id, photo=open(photo_file, 'rb'), reply_markup=keyboard2)
            await asyncio.sleep(60)
            await bot.delete_message(user_id, photo_msg.message_id)
            user.set_discount_sent(user_id)
            await bot.send_message(user_id, "–§–æ—Ç–æ –∑—ñ –∑–Ω–∏–∂–∫–æ—é –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ!")
        else:
            await bot.send_message(user_id, "–ó–Ω–∏–∂–∫—É –≤–∂–µ –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not message.from_user.username:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º",
                                            request_contact=True)
        keyboard.add(button_phone)
        await bot.send_message(message.chat.id, '–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.',
                               reply_markup=keyboard)
    else:
        user.insert_user(message.from_user.id, message.from_user.username)
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, " +
                             message.from_user.username +
                             "!\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–æ–Ω–∞—Ç—É –≤—ñ–¥ 50 –≥—Ä–Ω."
                             f"\n\n–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ –º–∞—î –±—É—Ç–∏ –≤–∏–¥–Ω–æ –¥–∞—Ç—É, –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ —ñ —Å—É–º—É."
                             f"\n\n\U0001F517–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É"
                             f"\nhttps://send.monobank.ua/jar/3nfPJJfvVR"
                             f"\n\n\U0001F4B3–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –±–∞–Ω–∫–∏"
                             f"\n5375 4112 0341 4979")


@dp.message_handler(content_types=['contact'])
async def contact(message):
    print("here i am")
    if message.contact is not None:
        phone_number = str(message.contact.phone_number)
        user.updateUsernameNumber(message.contact.user_id, phone_number)
        keyboard2 = types.ReplyKeyboardRemove()
        await message.answer(f"–ù–æ–º–µ—Ä —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ."
                             f"\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–æ–Ω–∞—Ç—É –≤—ñ–¥ 50 –≥—Ä–Ω."
                             f"\n\n–ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ñ –º–∞—î –±—É—Ç–∏ –≤–∏–¥–Ω–æ –¥–∞—Ç—É, –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ —ñ —Å—É–º—É."
                             f"\n\n\U0001F517–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É"
                             f"\nhttps://send.monobank.ua/jar/3nfPJJfvVR"
                             f"\n\n\U0001F4B3–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –±–∞–Ω–∫–∏"
                             f"\n5375 4112 0341 4979",
                             reply_markup=keyboard2)


@dp.message_handler(commands=['groups_test'])
async def group_users_by_personality(message: types.Message) -> None:
    print("--------------------------------- Work ---------------------------------")
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É
    if str(message.from_user.id) not in admins_list:
        await message.answer("No access.")
        return

    users_data_ids = user.get_users_all_questions()
    print(users_data_ids)
    users_answers = []
    for i in range(len(users_data_ids)):
        ud = user_answer.get_data_user(users_data_ids[i])
        answer_of_user = []
        for j in ud:
            answer_of_user.append(j[3])
        users_answers.append(answer_of_user)
    batch_size = 4
    n_clusters = math.ceil(len(users_data_ids) / batch_size)  # Maximum number of clusters
    categories.insert_categories(n_clusters)

    if n_clusters > 0:
        classification = Classification(users_data_ids, users_answers, n_clusters)
        classification.classificate()
        cluster_assignments = classification.get_groups()

    else:
        cluster_assignments = []
        for _ in users_data_ids:
            cluster_assignments.append(1)
    # print(cluster_assignments)
    user.updateCategory(users_data_ids, cluster_assignments)
    await message.answer("Ready. Press /groups to see results.")


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def process_payment_photo(message: types.Message):
    print("here", user.getUsernameId(message.from_user.id))
    if user.getUsernameId(message.from_user.id) is not None:
        if user.is_screen_valid(message.from_user.id):
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–¢–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —Å–≤–æ—î —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç–∏.")
        else:
            await message.forward(chat_id=chat_id)
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text="–í–∞–ª—ñ–¥–Ω–∞", callback_data=f"valid {message.from_user.id} "))
            keyboard.add(
                types.InlineKeyboardButton(text="–ù–µ–¥—ñ–π—Å–Ω–∞", callback_data=f"invalid {message.from_user.id} "))
            await bot.send_message(chat_id=chat_id,
                                   text="–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç–∏.",
                                   reply_markup=keyboard)
    else:
        await bot.send_message(message.from_user.id, '–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.')


@dp.callback_query_handler(lambda c: "valid" in c.data)
async def process_verification_result(callback_query: types.CallbackQuery):
    data_user = callback_query.data.split(' ')
    answer = data_user[0]
    user_id = data_user[1]
    username = user.getUsernameId(user_id)
    if answer == "valid":
        user.set_screen_valid(user_id)
        if username:
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ñ–¥ @{username} –ø—Ä–∏–π–Ω—è—Ç–æ!")
        else:
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!")

        await bot.send_message(chat_id=user_id,
                               text="–î—è–∫—É—î–º–æ! –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–π–Ω—è—Ç–æ! –¢–∏ –º–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è.\n"
                                    "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫–∏–π —Ö–æ—á–µ—à –æ–±—Ä–∞—Ç–∏.")
        order[str(user_id)] = 0
        await ask_question(user_id)
    elif answer == "invalid":
        if username:
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ñ–¥ @{username} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!")
        else:
            await bot.send_message(chat_id=chat_id,
                                   text=f"–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ñ–¥ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!")
        await bot.send_message(chat_id=user_id,
                               text="–§–æ—Ç–æ –æ–ø–ª–∞—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –≤–∞–ª—ñ–¥–Ω–µ —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç–∏.")


@dp.message_handler(commands=['groups'])
async def groups(message: types.Message):
    if str(message.from_user.id) in admins_list:
        result_users_in_groups = ""
        category_ids = categories.get_categories_ids()
        for category_id in category_ids:
            result_users_in_groups += f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è {category_id}: {str(user.get_usernames_by_category_id(category_id))}\n"
        await message.answer(result_users_in_groups)
    else:
        await message.answer("No access.")


async def ask_question(user_id):
    try:
        row = data[order[str(user_id)]]
    except IndexError:
        row = None
    if row is not None:
        answer_buttons = [
            InlineKeyboardButton(answer['title'], callback_data=
            f"{row['id_question']} {answer['id']} {user_id}") for answer in row['answers']
        ]
        reply_markup = InlineKeyboardMarkup().add(*answer_buttons)
        await bot.send_message(text=f"{row['title']}", reply_markup=reply_markup, chat_id=user_id)
    else:
        await bot.send_message(text=f"–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!\n–¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n{user_answer.print(user_id)}\n",
                               chat_id=user_id)
        await bot.send_message(text=f"–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –±–æ—Ç –æ–ø—Ä–∞—Ü—é—î —Ç–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –ù–µ–∑–∞–±–∞—Ä–æ–º —Ç–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è –ø—Ä–æ —Å–≤–æ—é "
                                    f"–≥—Ä—É–ø—É —Ç–∞ –∑–Ω–∏–∂–∫–∏ –≤ –∑–∞–∫–ª–∞–¥—ñ ¬´–ö–æ—Ñ—ñ-—à–æ–ø¬ª. \n–©–∏—Ä–æ –¥—è–∫—É—î–º–æ, —â–æ —Ç–∏ –∑ –Ω–∞–º–∏ –≤ —Ü—å–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ!",
                               chat_id=user_id)


@dp.callback_query_handler(lambda c: re.match("\d+\s+\d+\s+\d+", c.data))
async def process_callback_query(callback_query: types.CallbackQuery):
    global order
    answer_user = callback_query.data.split()
    question_id = answer_user[0]
    answer_id = answer_user[1]
    user_id = answer_user[2]
    try:
        if int(data[order[str(callback_query.from_user.id)]]["id_question"]) == int(question_id):
            print("here")

            user_answer.insert_data(question_id, user_id, answer_id)
            order[str(user_id)] += 1
            await ask_question(user_id)
        else:
            print("else")
            user_answer.insert_data(question_id, user_id, answer_id)
    except IndexError as e:
        print("except")
        user_answer.insert_data(question_id, user_id, answer_id)
        await bot.send_message(text=f"–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!\n–¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n{user_answer.print(user_id)}\n",
                               chat_id=user_id)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
